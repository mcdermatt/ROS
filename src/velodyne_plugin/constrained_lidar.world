<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="default">

    <physics type='ode'>
      <!-- default: step size (for real time demo but distorts point clouds) -->
      <!-- <max_step_size>0.001000</max_step_size> -->
      <!-- <real_time_update_rate>1000.000000</real_time_update_rate> -->
      <!-- midway point for testing -->
      <max_step_size>0.0000100</max_step_size>
      <real_time_update_rate>100000.000000</real_time_update_rate>
      <!-- slow down for accurate data generation  -->
      <!-- <max_step_size>0.00000200</max_step_size> -->
      <!-- <real_time_update_rate>500000.000000</real_time_update_rate> -->

      <real_time_factor>1.000000</real_time_factor>
      <!-- <gravity>0.000000 0.000000 -9.800000</gravity> -->
      <gravity>0.000000 0.000000 0.0000</gravity>
    </physics>

    <plugin name="joint_velocity_controller" filename="./libjoint_velocity_controller.so">
      <!-- <robotNamespace>/my_velodyne</robotNamespace> -->
      <updateRate>50.0</updateRate>
      <jointName>x_joint</jointName>
      <!-- <jointName>joint2</jointName> -->
      <!-- <jointName>joint3</jointName> -->
    </plugin>

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- A ground plane -->
    <include>
      <uri>model://ground_plane</uri>
    </include>

    <model name="my_velodyne">
      <pose>0 0 0 0 0 0</pose>
      <!-- Give the base link a unique name -->
      <link name="base">
        <!-- Offset the base by half the lenght of the cylinder -->
        <!-- <pose>0 0 0.029335 0 0 0</pose> -->
        <!-- <pose>0 0 0.5 0 0 0</pose> -->
        <!-- <pose>0 0 1.0 0 0 0</pose> -->
        <inertial>
        <mass>100000.0</mass>
        <!-- leaving defaulut inertial params causes base to spin w.r.t. world (bad) -->
        <!-- <mass>1.2</mass> -->
<!--         <inertia>
          <ixx>0.001087473</ixx>
          <iyy>0.001087473</iyy>
          <izz>0.001092437</izz>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyz>0</iyz>
        </inertia> -->
        </inertial>

        <collision name="base_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>.04267</radius>
              <length>.05867</length>
              <!-- <length>1.0</length> -->
            </cylinder>
          </geometry>
        </collision>
        <!-- The visual is mostly a copy of the collision -->
        <visual name="base_visual">
          <geometry>
            <cylinder>
              <radius>.04267</radius>
              <length>.05867</length>
              <!-- <length>1.0</length> -->
            </cylinder>
          </geometry>
          <material>
            <ambient>0.25 0.25 0.25 1 </ambient>
            <!-- <script>Gazebo/WoodPallet</script> -->
          </material>
        </visual>
      </link>

      <joint name="x_joint" type="prismatic">
        <parent link="world"/>
        <child link="base"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="1 0 0"/>
      </joint>

      <!-- Give the base link a unique name -->
      <link name="top">
        <!-- Vertically offset the top cylinder by the length of the bottom
            cylinder and half the length of this cylinder. -->
        <pose>0 0 0.095455 0 0 0</pose>
        <!-- <pose>0 0 1.036 0 0 0</pose> -->
        <inertial>
         <mass>0.1</mass>
         <inertia>
           <ixx>0.000090623</ixx>
           <iyy>0.000090623</iyy>
           <izz>0.000091036</izz>
           <ixy>0</ixy>
           <ixz>0</ixz>
           <iyz>0</iyz>
         </inertia>
        </inertial>
        <collision name="top_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>0.04267</radius>
              <length>0.07357</length>
            </cylinder>
          </geometry>
        </collision>

        <!-- The visual is mostly a copy of the collision -->
        <visual name="top_visual">
          <geometry>
            <cylinder>
              <radius>0.04267</radius>
              <length>0.07357</length>
            </cylinder>
          </geometry>
        </visual>
        <!-- Add a ray sensor, and give it a name -->
        <sensor type="ray" name="sensor">

          <!-- Position the ray sensor based on the specification. Also rotate
               it by 90 degrees around the X-axis so that the <horizontal> rays
               become vertical -->
          <pose>0 0 -0.004645 1.5707 0 0</pose>
          <!-- <pose>0 0 0.995315 1.5707 0 0</pose> -->

          <!-- Enable visualization to see the rays in the GUI -->
          <visualize>true</visualize>

          <!-- Set the update rate of the sensor -->
          <!-- <update_rate>30</update_rate> -->
          <!-- <update_rate>18000</update_rate>  -->
          <update_rate>45000</update_rate> 
          <ray>
            <!-- The scan element contains the horizontal and vertical beams.
                 We are leaving out the vertical beams for this tutorial. -->
          <noise>
            <!-- Use gaussian noise -->
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.02</stddev>
          </noise>
            <scan>
              <!-- The horizontal beams -->
              <horizontal>
                <!-- The velodyne has 32 beams(samples) -->
                <!-- <samples>64</samples> -->
                <samples>16</samples>

                <!-- Resolution is multiplied by samples to determine number of
                     simulated beams vs interpolated beams. See:
                     http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
                     -->
                <!-- <resolution>1</resolution> -->
                <resolution>4</resolution>

                <!-- Minimum angle in radians -->
                <min_angle>-0.53529248</min_angle>

                <!-- Maximum angle in radians -->
                <max_angle>0.18622663</max_angle>
                <!-- <max_angle>0.53529248</max_angle> -->
              </horizontal>
            </scan>

            <!-- Range defines characteristics of an individual beam -->
            <range>

              <!-- Minimum distance of the beam -->
              <!-- <min>0.05</min> -->
              <min>0.25</min> 

              <!-- Maximum distance of the beam -->
              <max>70</max>

              <!-- Linear resolution of the beam -->
              <resolution>0.01</resolution>
            </range>
          </ray>
          <plugin name="sensor_plugin" filename="libgazebo_ros_laser.so">
            <topicName>/my_velodyne/top/sensor/scan</topicName>
            <frameName>/base</frameName>
          </plugin>
        </sensor>

      </link>

      <link name="xarrow">
        <pose>0.5 0 0 0 1.570796326 0</pose>
        <!-- <pose>0.5 0 0 0 0 0 </pose> -->
        <visual name="xarrow_visual">
          <geometry>
            <cylinder>
              <radius>.015</radius>
              <length>1.0</length>
            </cylinder>
            <!-- <box>
              <size> 1 0.1 0.1</size>
            </box> -->
          </geometry>
          <material>
            <ambient>0.8 0.2 0.2 1 </ambient>
          </material>
        </visual>
      </link>

      <link name="yarrow">
        <pose>0 0.5 0 1.5708 0 0</pose>
        <visual name="yarrow_visual">
          <geometry>
            <cylinder>
              <radius>.015</radius>
              <length>1.0</length>
            </cylinder>
          </geometry>
          <material>
            <ambient>0.2 0.8 0.2 1 </ambient>
          </material>
        </visual>
      </link>

      <link name="zarrow">
        <pose>0 0 0.5 0 0 0</pose>
        <visual name="zarrow_visual">
          <geometry>
            <cylinder>
              <radius>.015</radius>
              <length>1.0</length>
            </cylinder>
          </geometry>
          <material>
            <ambient>0.2 0.2 0.8 1 </ambient>
          </material>
        </visual>
      </link>

    <joint type="fixed" name = "xarrow_joint">
      <parent>base</parent>
      <child>x_arrow</child>
      <!-- <origin xyz="0 0 0" rpy="0 0 0" /> -->
    </joint>
    <joint type="fixed" name = "zarrow_joint">
      <parent>base</parent>
      <child>z_arrow</child>
    </joint>

    <!-- Each joint must have a unique name -->
    <joint type="revolute" name="joint">
      <!-- Position the joint at the bottom of the top link -->
      <pose>0 0 -0.036785 0 0 0</pose>
      <!-- <pose>0 0 0.96315 0 0 0</pose> -->
      <!-- Use the base link as the parent of the joint -->
      <parent>base</parent>
      <!-- Use the top link as the child of the joint -->
      <child>top</child>
      <!-- The axis defines the joint's degree of freedom -->
      <axis>
        <!-- Revolve around the z-axis -->
        <xyz>0 0 1</xyz>
        <!-- Limit refers to the range of motion of the joint -->
        <limit>
          <!-- Use a very large number to indicate a continuous revolution -->
          <lower>-10000000000000000</lower>
          <upper>10000000000000000</upper>
        </limit>
      </axis>
    </joint>
    <!-- add in velocity controller -->
    <!-- <plugin name="velodyne_control" filename="./libvelodyne_plugin.so">
    <velocity>5</velocity>
    </plugin> -->
    <plugin name="velodyne_control" filename="./libvelodyne_plugin.so"/>
    </model>

    <model name='apartment'>
      <static>1</static>
      <link name='link'>
        <collision name='collision'>
          <geometry>
            <mesh>
              <uri>model://apartment/meshes/apartment.dae</uri>
            </mesh>
          </geometry>
          <max_contacts>10</max_contacts>
          <surface>
            <contact>
              <ode/>
            </contact>
            <bounce/>
            <friction>
              <torsional>
                <ode/>
              </torsional>
              <ode/>
            </friction>
          </surface>
        </collision>
        <visual name='visual'>
          <geometry>
            <mesh>
              <uri>model://apartment/meshes/apartment.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <self_collide>0</self_collide>
        <enable_wind>0</enable_wind>
        <kinematic>0</kinematic>
      </link>
      <pose>-12.5267 -0.017426 0 0 -0 0</pose>
    </model>
    <model name='apartment_0'>
      <static>1</static>
      <link name='link'>
        <collision name='collision'>
          <geometry>
            <mesh>
              <uri>model://apartment/meshes/apartment.dae</uri>
            </mesh>
          </geometry>
          <max_contacts>10</max_contacts>
          <surface>
            <contact>
              <ode/>
            </contact>
            <bounce/>
            <friction>
              <torsional>
                <ode/>
              </torsional>
              <ode/>
            </friction>
          </surface>
        </collision>
        <visual name='visual'>
          <geometry>
            <mesh>
              <uri>model://apartment/meshes/apartment.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <self_collide>0</self_collide>
        <enable_wind>0</enable_wind>
        <kinematic>0</kinematic>
      </link>
      <pose>18.465 0.01907 0 0 -0 0</pose>
    </model>

  </world>
</sdf>
