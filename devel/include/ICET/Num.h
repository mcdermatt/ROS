// Generated by gencpp from file ICET/Num.msg
// DO NOT EDIT!


#ifndef ICET_MESSAGE_NUM_H
#define ICET_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ICET
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : timestamp()
    , errors(false)
    , ch1(0.0)
    , ch2(0.0)
    , status()  {
    }
  Num_(const ContainerAllocator& _alloc)
    : timestamp()
    , errors(false)
    , ch1(0.0)
    , ch2(0.0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _errors_type;
  _errors_type errors;

   typedef float _ch1_type;
  _ch1_type ch1;

   typedef float _ch2_type;
  _ch2_type ch2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::ICET::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ICET::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::ICET::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::ICET::Num > NumPtr;
typedef boost::shared_ptr< ::ICET::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ICET::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ICET::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ICET::Num_<ContainerAllocator1> & lhs, const ::ICET::Num_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.errors == rhs.errors &&
    lhs.ch1 == rhs.ch1 &&
    lhs.ch2 == rhs.ch2 &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ICET::Num_<ContainerAllocator1> & lhs, const ::ICET::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ICET

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ICET::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ICET::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ICET::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ICET::Num_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ICET::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ICET::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ICET::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c756fa6b1c2901279edb34f2bd952f7";
  }

  static const char* value(const ::ICET::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c756fa6b1c29012ULL;
  static const uint64_t static_value2 = 0x79edb34f2bd952f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ICET::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ICET/Num";
  }

  static const char* value(const ::ICET::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ICET::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n"
"bool errors\n"
"float32 ch1\n"
"float32 ch2\n"
"string status\n"
;
  }

  static const char* value(const ::ICET::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ICET::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.errors);
      stream.next(m.ch1);
      stream.next(m.ch2);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ICET::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ICET::Num_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "errors: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errors);
    s << indent << "ch1: ";
    Printer<float>::stream(s, indent + "  ", v.ch1);
    s << indent << "ch2: ";
    Printer<float>::stream(s, indent + "  ", v.ch2);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICET_MESSAGE_NUM_H
